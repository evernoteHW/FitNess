//
//  StatusCommentViewController.m
//  FitNess
//
//  Created by WeiHu on 14/10/22.
//  Copyright (c) 2014年 WeiHu. All rights reserved.
//

#import "StatusCommentViewController.h"
#import "RTLabel.h"
#import "StatuesModel.h"
#import "CommentsModel.h"
#import "EGORefreshTableHeaderView.h"

@implementation StatusCommentCell

- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{
    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
    self.backgroundColor = [UIColor clearColor];

    CGFloat contw =  DIME_SCREEN_W - 26;
    
    self.headView = [[UIButton alloc] initWithFrame:CGRectMake(_px(10), _px(36), _px(96), _px(96))];
    [self.headView setImage:[UIImage imageNamed:@"quan_list_img"] forState:UIControlStateNormal];
    [CommonUtils generateRoundButton:self.headView];
    [self.contentView addSubview:self.headView];
    
    self.nameView = [[UILabel alloc]initWithFrame:CGRectMake(_px(120), _px(44), _px(300), _px(30))];
    self.nameView.textColor = [UIColor colorWithHexString:@"FC6995"];
    self.nameView.font = FONT_SIZE(_px(28));
    [self.contentView addSubview:self.nameView];
    
    self.timeView = [[UILabel alloc]initWithFrame:CGRectMake(contw-_px(250), _px(52), _px(250), _px(18))];
    self.timeView.font = FONT_SIZE(_px(18));
    self.timeView.textColor =[UIColor grayColor];
    [self.contentView addSubview:self.timeView];
    
    self.contView = [[RTLabel alloc]initWithFrame:CGRectMake(_px(120), _px(78), _px(466), _px(2))];
    self.contView.font = FONT_SIZE(_px(24));
    self.contView.textColor =[UIColor grayColor];
    self.contView.backgroundColor = [UIColor clearColor];
    [self.contentView addSubview:self.contView];
    
    self.commentButton = [[UIButton alloc]initWithFrame:CGRectMake(self.nameView.left, self.headView.bottom, _px(70), _px(36))];
    [self.commentButton setImage:[UIImage imageNamed:@"quan_list_chat"] forState:UIControlStateNormal];
    [self.commentButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
    self.commentButton.titleLabel.font = FONT_SIZE(_px(24));
    [self.commentButton setImageEdgeInsets:UIEdgeInsetsMake(0, -5, 0, 5)];
    [self.contentView addSubview:self.commentButton];
    
    [self.commentButton addTarget:self action:@selector(onCommont) forControlEvents:UIControlEventTouchUpInside];
    
    return self;
}

- (void)onCommont
{
    if (self.callBackBlock) {
        self.callBackBlock(self);
    }
}
- (void)setStatuesModel:(StatuesModel *)statuesModel
{
    _statuesModel = statuesModel;
  
    self.nameView.text = self.statuesModel.user.userName;
    self.timeView.text = self.statuesModel.commentsModel.stsDate;
    //点赞消息
    self.contView.text = self.statuesModel.commentsModel.commentContent;
    //设置内容区的frame
    self.contView.height = [self.contView optimumSize].height + 10;
    //设置下部三个按钮的frame
    self.commentButton.top = self.contView.bottom ;
    
    [self.headView sd_setImageWithURL:[NSURL URLWithString:self.statuesModel.user.userImgPath] forState:UIControlStateNormal placeholderImage:[UIImage imageNamed:@"quan_list_img"]];
}


+ (CGFloat) getCellHeightWithModel:(CommentsModel *)model
{
    CGFloat contentHeight = 0;
    CGFloat extraHeight = _px(160);
    if (model.commentContent.length>0) {
        RTLabel *labelDemo = [[RTLabel alloc]initWithFrame:CGRectMake(_px(120), _px(78), _px(466), _px(2))];
        labelDemo.font = FONT_SIZE(_px(24));
        labelDemo.textColor =[UIColor grayColor];
        labelDemo.text = model.commentContent;
        contentHeight = labelDemo.optimumSize.height;
    }

    return contentHeight + extraHeight;
}

@end


@interface StatusCommentViewController ()<UITableViewDataSource,UITableViewDelegate,UITextFieldDelegate,EGORefreshTableHeaderDelegate>
{
    UITextField *_commentTextField;
    UITapGestureRecognizer *singleTapGR ;
    EGORefreshTableHeaderView *_refreshHeaderView;
    BOOL _reloading;
}

@property (nonatomic, strong) UITableView *commentsTableView;
@property (nonatomic, strong) UIView *commentsTableHeadView;            //列表头试图
@property (nonatomic, strong) NSMutableArray *commentsArray;            //列表数据
@property (nonatomic, strong) UIButton *headImageBtn;
@property (nonatomic, strong) UILabel *nameLabel;
@property (nonatomic, strong) UILabel *timeLabel;
@property (nonatomic, strong) RTLabel *contentLabel;
@property (nonatomic, strong) UIImageView *imgContView;
@property (nonatomic, strong) UITextField *commentTextField;
@property (nonatomic, strong) UIButton *sendMsgBtn;
@property (nonatomic, strong) UILabel *commentsCountLabel;
//@property (nonatomic, strong) NSMutableArray *selectedFriArray;
@property (nonatomic, strong) UIView *customKeybordView;    //自定义输入框

@end

@implementation StatusCommentViewController


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        _commentsArray = [NSMutableArray array];
        //增加监听，当键盘出现或改变时收出消息
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(keyboardWillShow:)
                                                     name:UIKeyboardWillShowNotification
                                                   object:nil];
        
        //增加监听，当键退出时收出消息
        [[NSNotificationCenter defaultCenter] addObserver:self
                                                 selector:@selector(keyboardWillHide:)
                                                     name:UIKeyboardWillHideNotification
                                                   object:nil];

    }
    return self;
}

#pragma mark
#pragma mark keyboardWillShow 和 keyboardWillHide 监听键盘和键盘一起出动

//Code from Brett Schumann
-(void) keyboardWillShow:(NSNotification *)note{
    // get keyboard size and loctaion
	CGRect keyboardBounds;
    [[note.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue: &keyboardBounds];
    NSNumber *duration = [note.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    NSNumber *curve = [note.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
    
    // Need to translate the bounds to account for rotation.
    keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
    
	// get a rect for the textView frame
	CGRect containerFrame = self.customKeybordView.frame;
    containerFrame.origin.y = self.view.bounds.size.height - (keyboardBounds.size.height + containerFrame.size.height);
	// animations settings
	[UIView beginAnimations:nil context:NULL];
	[UIView setAnimationBeginsFromCurrentState:YES];
    [UIView setAnimationDuration:[duration doubleValue]];
    [UIView setAnimationCurve:[curve intValue]];
	
	// set views with new info
	self.customKeybordView.frame = containerFrame;
    
	// commit animations
	[UIView commitAnimations];
    if (singleTapGR == nil) {
        singleTapGR  =  [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapAnywhereToDismissKeyboard:)];
    }
    [self.view addGestureRecognizer:singleTapGR];
    
}

-(void) keyboardWillHide:(NSNotification *)note{
    NSNumber *duration = [note.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
    NSNumber *curve = [note.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
	
	// get a rect for the textView frame
	CGRect containerFrame = self.customKeybordView.frame;
    containerFrame.origin.y = self.view.height  - 50;
	
	// animations settings
	[UIView beginAnimations:nil context:NULL];
	[UIView setAnimationBeginsFromCurrentState:YES];
    [UIView setAnimationDuration:[duration doubleValue]];
    [UIView setAnimationCurve:[curve intValue]];
    
	// set views with new info
	self.customKeybordView.frame = containerFrame;
	
	// commit animations
	[UIView commitAnimations];
    
    [self.view removeGestureRecognizer:singleTapGR];
}

- (void)tapAnywhereToDismissKeyboard:(UIGestureRecognizer *)gestureRecognizer {
    //此method会将self.view里所有的subview的first responder都resign掉
    [self.view endEditing:YES];
}

- (void)dealloc
{
    NSLog(@"%s",__FUNCTION__);
}


- (void)viewDidLoad
{
    [super viewDidLoad];
    self.navigationItem.title = @"评论列表";
    self.view.backgroundColor = [UIColor colorWithHexString:@"EFEFEF"];

    [self.view addSubview:self.commentsTableView];
    [self.view addSubview:self.customKeybordView];
    
    [self requstMsgData];
}

- (UITableView *)commentsTableView
{
    if (_commentsTableView == nil) {
        _commentsTableView = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, DIME_SCREEN_W, DIME_SCREEN_H - 64 - 50) style:UITableViewStylePlain];
        _commentsTableView.rowHeight = 70;
        _commentsTableView.backgroundColor = [UIColor clearColor];
        _commentsTableView.dataSource = self;
        _commentsTableView.delegate = self;
        _commentsTableView.tableHeaderView = self.commentsTableHeadView;
        _commentsTableView.tableFooterView = [UIView new];
        
        if (_refreshHeaderView == nil) {
            
            _refreshHeaderView= [[EGORefreshTableHeaderView alloc] initWithFrame:CGRectMake(0.0f, 0.0f - _commentsTableView.bounds.size.height, self.view.frame.size.width, _commentsTableView.bounds.size.height)];
            _refreshHeaderView.delegate = self;
            [_commentsTableView addSubview:_refreshHeaderView];
        }
        //  update the last update date
        [_refreshHeaderView refreshLastUpdatedDate];
    }
    return _commentsTableView;
}

- (UIView *)customKeybordView
{
    if (_customKeybordView == nil) {
        _customKeybordView = [[UIView alloc] initWithFrame:CGRectMake(0, self.view.height - 64 - 50, DIME_SCREEN_W, 50)];
        _customKeybordView.backgroundColor = [UIColor colorWithHexString:@"CF004F"];
    
        self.commentTextField = [[UITextField alloc] initWithFrame:CGRectMake(10 , 10, 180, 30)];
        self.commentTextField.delegate = self;
        self.commentTextField.returnKeyType = UIReturnKeySearch;
        self.commentTextField.placeholder = @"输入评论内容";
        self.commentTextField.backgroundColor=[UIColor whiteColor];
        self.commentTextField.font = [UIFont systemFontOfSize:15.0f];
        self.commentTextField.textColor = [UIColor blackColor];
        self.commentTextField.delegate = self;
        self.commentTextField.returnKeyType = UIReturnKeySend;
        self.commentTextField.leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 10, 0)];
        self.commentTextField.leftViewMode = UITextFieldViewModeAlways;
        [_customKeybordView addSubview:self.commentTextField];
        
        self.sendMsgBtn =[[UIButton alloc]initWithFrame:CGRectMake(self.commentTextField.right + 10, 5, 80,40)];
        [self.sendMsgBtn addTarget:self action:@selector(sendMsgBtnAction) forControlEvents:UIControlEventTouchUpInside];
        [self.sendMsgBtn setTitle:@"发送" forState:UIControlStateNormal];
        self.sendMsgBtn.titleLabel.font = [UIFont boldSystemFontOfSize:15.0f];
        self.sendMsgBtn.backgroundColor = [UIColor clearColor];
        [self.sendMsgBtn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [self.sendMsgBtn setTitleColor:[UIColor grayColor] forState:UIControlStateHighlighted];
        [_customKeybordView addSubview:self.sendMsgBtn];
    }
    return _customKeybordView;
}

- (UIView *)commentsTableHeadView
{
    if (_commentsTableHeadView == nil) {
        _commentsTableHeadView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, DIME_SCREEN_W, 0)];
        _commentsTableHeadView.backgroundColor = [UIColor clearColor];
        
        self.headImageBtn = [[UIButton alloc] initWithFrame:CGRectMake(_px(10), _px(36), _px(96), _px(96))];
        [self.headImageBtn sd_setImageWithURL:[NSURL URLWithString:self.selectedModel.user.userImgPath] forState:UIControlStateNormal placeholderImage:[UIImage imageNamed:@"quan_list_img"]];
        [CommonUtils generateRoundButton:self.headImageBtn];
        [_commentsTableHeadView addSubview:self.headImageBtn];
        
        self.nameLabel = [[UILabel alloc]initWithFrame:CGRectMake(_px(120), _px(44), _px(300), _px(30))];
        self.nameLabel.textColor = [UIColor colorWithHexString:@"FC6995"];
        self.nameLabel.font = FONT_SIZE(_px(28));
        self.nameLabel.text = self.selectedModel.user.userName;
        [_commentsTableHeadView addSubview:self.nameLabel];
        
        self.timeLabel = [[UILabel alloc]initWithFrame:CGRectMake(_px(120), _px(78), _px(466), _px(18))];
        self.timeLabel.font = FONT_SIZE(_px(18));
        self.timeLabel.textColor =[UIColor grayColor];
        self.timeLabel.text = self.selectedModel.userMessageVO.stsDate;
        [_commentsTableHeadView addSubview:self.timeLabel];
        
        self.contentLabel = [[RTLabel alloc]initWithFrame:CGRectMake(_px(120),self.headImageBtn.bottom, _px(466), _px(2))];
        self.contentLabel.font = FONT_SIZE(_px(24));
        self.contentLabel.textColor =[UIColor grayColor];
        self.contentLabel.backgroundColor = [UIColor clearColor];
        self.contentLabel.text = self.selectedModel.userMessageVO.msgContent;
        self.contentLabel.height = self.contentLabel.optimumSize.height + 5;
        [_commentsTableHeadView addSubview:self.contentLabel];
        
        self.imgContView = [[UIImageView alloc]initWithFrame:CGRectMake(_px(120), self.contentLabel.bottom, _px(150), _px(150))];
        self.imgContView.contentMode = UIViewContentModeScaleAspectFit;
        self.imgContView.userInteractionEnabled = YES;
        [self.imgContView sd_setImageWithURL:[NSURL URLWithString:self.selectedModel.userMessageVO.msgImg]  placeholderImage:nil];
        if (self.selectedModel.userMessageVO.msgImg.length > 0) {
            self.imgContView.hidden = NO;
        }else{
            self.imgContView.hidden = YES;
        }
        UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(imgContViewAction)];
        tapGesture.numberOfTapsRequired = 1;
        [self.imgContView addGestureRecognizer:tapGesture];
        [_commentsTableHeadView addSubview:self.imgContView];
        
        self.commentsCountLabel = [[UILabel alloc]initWithFrame:CGRectMake(0, (self.imgContView.hidden == YES) ? self.contentLabel.bottom: self.imgContView.bottom, DIME_SCREEN_W, 30)];
        self.commentsCountLabel.font = [UIFont systemFontOfSize:14.0f];
        self.commentsCountLabel.textColor =[UIColor grayColor];
        self.commentsCountLabel.text = [NSString stringWithFormat:@"       共有%d条评论",self.commentsArray.count];
        [_commentsTableHeadView addSubview:self.commentsCountLabel];
        
        _commentsTableHeadView.height  = 65 + ((self.imgContView.hidden == YES)? 0: _px(150)) + self.contentLabel.optimumSize.height + 5 + 10 + 30;
    }
    return _commentsTableHeadView;
}

#pragma mark 发送评论消息

- (void)sendMsgBtnAction
{
    NSLog(@"发送消息");
    ////////////////////////////////取消关注好友
    
    [self showHud];
    NSMutableDictionary *parametersDic = [NSMutableDictionary dictionary];
    [parametersDic setObject:[[FNDataKeeper sharedInstance] getUserId] forKey:URL_DATA_K_USER_ID];
    [parametersDic setObject:self.selectedModel.userMessageVO.uid forKey:URL_DATA_K_USER_MSGID];
    [parametersDic setObject:self.commentTextField.text forKey:URL_DATA_K_COMMENT_CONTENT];
    [parametersDic setObject:@"" forKey:URL_DATA_K_PARENT_ID];
    
    __unsafe_unretained StatusCommentViewController *weakSelf = self;
    [[NetworkManager shareManager] requestParams:parametersDic withModule:MODELS_MODEL_PARTYMANAGER method:MODELS_METHOD_USER_COMMENT_SUBMIT finishBlock:^(DataServies *request, id result) {
        
        NSString *msg = [result objectForKey:@"msg"];
        if ([[result objectForKey:@"flag"] integerValue] == 1) {
            [[TKAlertCenter defaultCenter] postAlertWithMessage:@"发表成功"];
            weakSelf.commentTextField.text = @"";
            [weakSelf.view endEditing:YES];
            if (weakSelf.statusCommentBlock) {
                weakSelf.statusCommentBlock([NSString stringWithFormat:@"%d",weakSelf.commentsArray.count + 1]);
            }
            [weakSelf requstMsgData];
        }else{
            NSLog(@"%@",msg);
        }
        [weakSelf hideHud];
        
    } failBlock:^(DataServies *request, NSError *error) {
        
        [weakSelf hideHud];
    }];
//    UIGestureRecognizer
}

#pragma mark 获取评论消息的内容

- (void)requstMsgData
{
    NSLog(@"发送消息");
    ////////////////////////////////取消关注好友
    
    [self showHud];
    NSMutableDictionary *parametersDic = [NSMutableDictionary dictionary];
    [parametersDic setObject:[[FNDataKeeper sharedInstance] getUserId] forKey:URL_DATA_K_USER_ID];
    [parametersDic setObject:self.selectedModel.userMessageVO.uid forKey:URL_DATA_K_USER_MSGID];
    
    __unsafe_unretained StatusCommentViewController *weakSelf = self;
    [[NetworkManager shareManager] requestParams:parametersDic withModule:MODELS_MODEL_PARTYMANAGER method:MODELS_METHOD_QRY_USER_COMMENT_LIST finishBlock:^(DataServies *request, id result) {
        
        NSString *msg = [result objectForKey:@"msg"];
        if ([[result objectForKey:@"flag"] integerValue] == 1) {
            NSArray *arr = [result objectForKey:@"retDataArray"];
            [weakSelf.commentsArray removeAllObjects];
            for (int i = 0 ; i<arr.count ; i++) {
                StatuesModel * fActivity = [StatuesModel modelWithDictionary:[arr objectAtIndex:i]];
                [weakSelf.commentsArray addObject:fActivity];
            }
            [weakSelf doneLoadingTableViewData];
            [weakSelf.commentsTableView reloadData];
            
        }else{
            NSLog(@"%@",msg);
        }
        [weakSelf hideHud];
        
    } failBlock:^(DataServies *request, NSError *error) {
        
        [weakSelf hideHud];
    }];
    //    UIGestureRecognizer
}

#pragma mark UITextFieldDelegate

- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    [self requstMsgData];
    [textField resignFirstResponder];
    return YES;
}

- (void)imgContViewAction
{
    NSLog(@"个人主页");
}
#pragma mark UITableViewDataSource


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return _commentsArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *identifier = @"StatusCommentCell";
    StatusCommentCell *cell = (StatusCommentCell *)[tableView dequeueReusableCellWithIdentifier:identifier];
    if (cell == nil) {
        cell = [[StatusCommentCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.separatorInset = UIEdgeInsetsZero;
        cell.backgroundColor = [UIColor whiteColor];
        __unsafe_unretained StatusCommentViewController *weakSelf = self;
        if (cell.callBackBlock == nil) {
            cell.callBackBlock = ^(StatusCommentCell *cell){
                
                [weakSelf.commentTextField becomeFirstResponder];
            };
        }
    
    }
    cell.statuesModel = _commentsArray[indexPath.row];
    return cell;
    
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    StatuesModel *model = (StatuesModel *)_commentsArray[indexPath.row];
    return [StatusCommentCell getCellHeightWithModel:model.commentsModel];
}

#pragma mark -
#pragma mark Data Source Loading / Reloading Methods

- (void)reloadTableViewDataSource{
	
	//  should be calling your tableviews data source model to reload
	//  put here just for demo
    [self requstMsgData];
    
	_reloading = YES;
	
}

- (void)doneLoadingTableViewData{
	
	//  model should call this when its done loading
	_reloading = NO;
	[_refreshHeaderView egoRefreshScrollViewDataSourceDidFinishedLoading:self.commentsTableView];
    
}


#pragma mark -
#pragma mark UIScrollViewDelegate Methods

- (void)scrollViewDidScroll:(UIScrollView *)scrollView{
	
	[_refreshHeaderView egoRefreshScrollViewDidScroll:scrollView];
    
}

- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate{
	
	[_refreshHeaderView egoRefreshScrollViewDidEndDragging:scrollView];
	
}


#pragma mark -
#pragma mark EGORefreshTableHeaderDelegate Methods

- (void)egoRefreshTableHeaderDidTriggerRefresh:(EGORefreshTableHeaderView*)view{
	
	[self reloadTableViewDataSource];
    //	[self performSelector:@selector(doneLoadingTableViewData) withObject:nil afterDelay:3.0];
	
}

- (BOOL)egoRefreshTableHeaderDataSourceIsLoading:(EGORefreshTableHeaderView*)view{
	
	return _reloading; // should return if data source model is reloading
	
}

- (NSDate*)egoRefreshTableHeaderDataSourceLastUpdated:(EGORefreshTableHeaderView*)view{
	
	return [NSDate date]; // should return date data source was last changed
	
}


//- (void)

@end
